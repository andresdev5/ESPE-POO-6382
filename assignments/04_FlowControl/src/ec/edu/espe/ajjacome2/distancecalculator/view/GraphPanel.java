/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.espe.ajjacome2.distancecalculator.view;

import ec.edu.espe.ajjacome2.distancecalculator.model.Line;
import ec.edu.espe.ajjacome2.distancecalculator.model.Point;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.util.ArrayList;

/**
 *
 * @author jon_m
 */
public class GraphPanel extends javax.swing.JPanel {
    private double zoom = 1;
    private ArrayList<Line> lines;
    
    /**
     * Creates new form Graph
     */
    public GraphPanel() {
        lines = new ArrayList<Line>();
        initComponents();
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        Graphics2D g2d = (Graphics2D)g;
        int width = getWidth();
        int height = getHeight();
        
        g2d.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        
        // draw ordinate, cardinate
        g2d.draw(new Line2D.Double(width / 2, height, width / 2, 0));
        g2d.draw(new Line2D.Double(0, height / 2, width, height / 2));
        
        double limit = (width * 100) / 95;
        double zoomWidth = width * zoom;
        double zoomHeight = height * zoom;
        double anchorx = (width - zoomWidth) / 2;
        double anchory = (height - zoomHeight) / 2;
        AffineTransform at = new AffineTransform();
        
        at.translate(anchorx, anchory);
        at.scale(zoom, -zoom);
        at.translate(getWidth() / 2, -getHeight() / 2);
        g2d.setTransform(at);
        g2d.setColor(Color.BLUE);
        
        lines.stream().map((line) -> {
            Point point1 = line.getPoint1();
            Point point2 = line.getPoint2();
            
            return new Line2D.Double(
                point1.getX(), point1.getY(),
                point2.getX(), point2.getY()
            );
        }).forEach((line) -> {
            g2d.draw(line);
        });
    }
    
    public void drawLine(Line line) {
        lines.add(line);
        repaint();
    }
    
    public void clearLines() {
        lines.clear();
        repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        int direction = (evt.getPreciseWheelRotation() < 0) ? 1 : 2;
        zoom += (direction == 1 ? 0.05 : -0.05);
        
        if (zoom < 0.05) {
            zoom = 0.05;
        }
        
        repaint();
    }//GEN-LAST:event_formMouseWheelMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
